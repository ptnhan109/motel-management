// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motel.Core.Data;

namespace Motel.Core.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220919033708___RenameTable")]
    partial class __RenameTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Role")
                        .HasColumnName("role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad26a393-c7df-4319-9f1c-784c8db79cf3"),
                            Address = "Cổ Nhuế, Từ Liêm",
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 190, DateTimeKind.Local).AddTicks(9296),
                            Gender = 1,
                            Mail = "trongnhan1110i@gmail.com",
                            Name = "Phạm Trọng Nhân",
                            Password = "T24UgcZyY5d5T538cm2QRc80DLB/e79sk97fjiJDzJw=",
                            Phone = "0775331777",
                            Role = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 191, DateTimeKind.Local).AddTicks(8027)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DateRetalPayment")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("BackIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Career")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FontIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentificationCitizen")
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Motel.Core.Entities.Fitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsCanUse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double>("RecoupPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Fitments");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FitmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("FitmentInRooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxHuman")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("DespositedValue")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomDepositeds");
                });

            modelBuilder.Entity("Motel.Core.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("603dd2cf-6785-452a-92cf-75164d3dad22"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(6820),
                            Name = "Tiền nhà",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(6841)
                        },
                        new
                        {
                            Id = new Guid("a1c590c6-205d-442e-bfa9-39127a502227"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7374),
                            Name = "Tiền điện",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7379)
                        },
                        new
                        {
                            Id = new Guid("8c29d6e1-7a96-4440-b1a3-c3229f3f3df5"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7395),
                            Name = "Tiền nước",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7396)
                        },
                        new
                        {
                            Id = new Guid("73038b69-c7ee-4b9d-9c6a-72c02888f442"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7398),
                            Name = "Xe máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7398)
                        },
                        new
                        {
                            Id = new Guid("49d352e7-002f-4291-a06e-d95064cc121c"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7400),
                            Name = "Tiền xe đạp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7401)
                        },
                        new
                        {
                            Id = new Guid("be009bae-e949-4f30-a571-14494bb40a93"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7402),
                            Name = "Tiền xe điện",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7403)
                        },
                        new
                        {
                            Id = new Guid("46a913d7-8ed9-40ef-be96-736cfcdbbe62"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7404),
                            Name = "Internet",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7405)
                        },
                        new
                        {
                            Id = new Guid("a2b43296-b69c-47ad-8763-40386a39dcf5"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7406),
                            Name = "Bảo vệ",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7407)
                        },
                        new
                        {
                            Id = new Guid("9e83baee-15ea-43e1-92da-c26f036e5ed0"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7416),
                            Name = "Máy giặt",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7416)
                        },
                        new
                        {
                            Id = new Guid("e71f8678-d11a-40bd-b256-b12502253b9a"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7418),
                            Name = "Truyền hình cáp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7418)
                        },
                        new
                        {
                            Id = new Guid("b0d8386f-48a7-4b64-909e-8b2c0f1a726d"),
                            CreatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7420),
                            Name = "Thang máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 19, 10, 37, 8, 192, DateTimeKind.Local).AddTicks(7421)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.ServiceInBoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceInBoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.HasOne("Motel.Core.Entities.Fitment", "Fitment")
                        .WithMany()
                        .HasForeignKey("FitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.ServiceInBoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("Motel.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
