// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motel.Core.Data;

namespace Motel.Core.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220922101943___AddColumnBoardingHouse")]
    partial class __AddColumnBoardingHouse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Role")
                        .HasColumnName("role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff7da8ac-b4f8-46be-b724-1eda088117c8"),
                            Address = "Cổ Nhuế, Từ Liêm",
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 938, DateTimeKind.Local).AddTicks(6344),
                            Gender = 1,
                            Mail = "trongnhan1110i@gmail.com",
                            Name = "Phạm Trọng Nhân",
                            Password = "T24UgcZyY5d5T538cm2QRc80DLB/e79sk97fjiJDzJw=",
                            Phone = "0775331777",
                            Role = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 939, DateTimeKind.Local).AddTicks(3151)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("EndDatePayment")
                        .HasColumnType("int");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("StartDatePayment")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("BackIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Career")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FontIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentificationCitizen")
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Motel.Core.Entities.Fitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsCanUse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double>("RecoupPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Fitments");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FitmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("FitmentInRooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.Provide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93e43d85-c157-4fda-8339-9f7fd73cda52"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(845),
                            Name = "Tiền nhà",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(865)
                        },
                        new
                        {
                            Id = new Guid("190f3dda-f254-4f35-b5a2-60b0dad2dc26"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1296),
                            Name = "Tiền điện",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1299)
                        },
                        new
                        {
                            Id = new Guid("faed9af1-61a9-48c3-afe1-f5b0a0ac7f56"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1312),
                            Name = "Tiền nước",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1313)
                        },
                        new
                        {
                            Id = new Guid("2dce07fd-34e0-479f-85aa-3a221796da92"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1315),
                            Name = "Xe máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1315)
                        },
                        new
                        {
                            Id = new Guid("966234f2-c787-4722-9928-be1a8fe04451"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1317),
                            Name = "Tiền xe đạp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1318)
                        },
                        new
                        {
                            Id = new Guid("749c43db-21e4-414f-8115-c6b9459b086d"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1319),
                            Name = "Tiền xe điện",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1320)
                        },
                        new
                        {
                            Id = new Guid("25f463a9-9543-4fc8-a2e9-b703be9041fc"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1332),
                            Name = "Internet",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1332)
                        },
                        new
                        {
                            Id = new Guid("1b4e2b0e-e82e-4c79-9723-2e99b2608ca5"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1334),
                            Name = "Bảo vệ",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1335)
                        },
                        new
                        {
                            Id = new Guid("85fd94c7-fcfb-4144-b0b8-b861dcbc2612"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1336),
                            Name = "Máy giặt",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1337)
                        },
                        new
                        {
                            Id = new Guid("5759984b-1c63-4564-a3d7-2a388b2d0b45"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1338),
                            Name = "Truyền hình cáp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1339)
                        },
                        new
                        {
                            Id = new Guid("c56d29ad-39b3-4263-92f6-3a515f341efa"),
                            CreatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1340),
                            Name = "Thang máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 22, 17, 19, 42, 940, DateTimeKind.Local).AddTicks(1341)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxHuman")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("DespositedValue")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomDepositeds");
                });

            modelBuilder.Entity("Motel.Core.Entities.ServiceInBoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceInBoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.HasOne("Motel.Core.Entities.Fitment", "Fitment")
                        .WithMany()
                        .HasForeignKey("FitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.ServiceInBoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Provide", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("Motel.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
