// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motel.Core.Data;

namespace Motel.Core.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20220920133520___ChangeServiceToProvide")]
    partial class __ChangeServiceToProvide
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Role")
                        .HasColumnName("role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("099857d0-b948-450d-bf98-f17f778b36dc"),
                            Address = "Cổ Nhuế, Từ Liêm",
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 790, DateTimeKind.Local).AddTicks(6671),
                            Gender = 1,
                            Mail = "trongnhan1110i@gmail.com",
                            Name = "Phạm Trọng Nhân",
                            Password = "T24UgcZyY5d5T538cm2QRc80DLB/e79sk97fjiJDzJw=",
                            Phone = "0775331777",
                            Role = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 791, DateTimeKind.Local).AddTicks(9027)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DateRetalPayment")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("BackIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Career")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FontIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentificationCitizen")
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Motel.Core.Entities.Fitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsCanUse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double>("RecoupPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Fitments");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FitmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("FitmentInRooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.Provide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74dd7f4c-9fee-40fb-bdf8-2d4ea6137c2f"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(4478),
                            Name = "Tiền nhà",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(4540)
                        },
                        new
                        {
                            Id = new Guid("ef978e71-c04b-4f18-af66-4f14db789655"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5476),
                            Name = "Tiền điện",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5483)
                        },
                        new
                        {
                            Id = new Guid("2021a9c7-1ad6-43a5-9469-d5da9474d875"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5514),
                            Name = "Tiền nước",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5516)
                        },
                        new
                        {
                            Id = new Guid("2a225b33-ecc6-42c9-9384-b2400c79dfff"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5520),
                            Name = "Xe máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5521)
                        },
                        new
                        {
                            Id = new Guid("8a0767c5-07f5-442c-8ba0-401a3e7e6672"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5524),
                            Name = "Tiền xe đạp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5526)
                        },
                        new
                        {
                            Id = new Guid("55a4dfe7-5835-4944-9c01-cf101d307525"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5530),
                            Name = "Tiền xe điện",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5531)
                        },
                        new
                        {
                            Id = new Guid("c3a9f072-0f42-4e50-b01d-001ff5be11ac"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5533),
                            Name = "Internet",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5535)
                        },
                        new
                        {
                            Id = new Guid("9f2823d6-9935-4107-8a63-a6fe19e19145"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5538),
                            Name = "Bảo vệ",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5540)
                        },
                        new
                        {
                            Id = new Guid("efa202b7-579f-4a2a-a380-248b920429d9"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5553),
                            Name = "Máy giặt",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5555)
                        },
                        new
                        {
                            Id = new Guid("6df76815-8c80-4b1d-a7ef-7de8b8174d0a"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5557),
                            Name = "Truyền hình cáp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5559)
                        },
                        new
                        {
                            Id = new Guid("8357e8c3-66c6-4df7-bd36-b3f67c32d07d"),
                            CreatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5561),
                            Name = "Thang máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 9, 20, 20, 35, 19, 793, DateTimeKind.Local).AddTicks(5562)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxHuman")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("DespositedValue")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomDepositeds");
                });

            modelBuilder.Entity("Motel.Core.Entities.ServiceInBoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceInBoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.HasOne("Motel.Core.Entities.Fitment", "Fitment")
                        .WithMany()
                        .HasForeignKey("FitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.ServiceInBoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Provide", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("Motel.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
