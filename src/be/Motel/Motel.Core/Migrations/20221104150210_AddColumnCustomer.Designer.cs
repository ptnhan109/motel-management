// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motel.Core.Data;

namespace Motel.Core.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20221104150210_AddColumnCustomer")]
    partial class AddColumnCustomer
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("Role")
                        .HasColumnName("role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("805add86-5e2a-4ea8-8340-d8aa9a102db7"),
                            Address = "Cổ Nhuế, Từ Liêm",
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 40, DateTimeKind.Local).AddTicks(5637),
                            Gender = 1,
                            Mail = "trongnhan1110i@gmail.com",
                            Name = "Phạm Trọng Nhân",
                            Password = "T24UgcZyY5d5T538cm2QRc80DLB/e79sk97fjiJDzJw=",
                            Phone = "0775331777",
                            Role = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 41, DateTimeKind.Local).AddTicks(4780)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("EndDatePayment")
                        .HasColumnType("int");

                    b.Property<bool?>("IsNotLimitTime")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelfPayment")
                        .HasColumnType("bit");

                    b.Property<int>("Months")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("StartDatePayment")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AvatarPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("BackIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Career")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FontIdentityPath")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdFactory")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IdentificationCitizen")
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Motel.Core.Entities.Fitment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsCanUse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<double>("RecoupPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Fitments");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FitmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FitmentId");

                    b.HasIndex("RoomId");

                    b.ToTable("FitmentInRooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.Provide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DefaultPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Provides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06deed36-dbb1-4cdb-9af1-65563f964c49"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(5837),
                            DefaultPrice = 4000.0,
                            Name = "Tiền điện",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(5871)
                        },
                        new
                        {
                            Id = new Guid("bc3a19f7-624e-4051-98d7-afeeb23a6374"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6844),
                            DefaultPrice = 100000.0,
                            Name = "Tiền nước",
                            Type = 1,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6851)
                        },
                        new
                        {
                            Id = new Guid("dc2eae29-1dc2-4359-a489-c8b362bc6d99"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6878),
                            DefaultPrice = 50000.0,
                            Name = "Gửi Xe máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6879)
                        },
                        new
                        {
                            Id = new Guid("be376a34-9615-4f93-89a3-8b125c0c3999"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6882),
                            DefaultPrice = 0.0,
                            Name = "Tiền xe đạp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6883)
                        },
                        new
                        {
                            Id = new Guid("cd0cbed0-4454-49b7-9f7a-ba76679d6244"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6885),
                            DefaultPrice = 100000.0,
                            Name = "Tiền xe điện",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6886)
                        },
                        new
                        {
                            Id = new Guid("01aa3fb2-4bf8-4943-8599-62b16925cbce"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6888),
                            DefaultPrice = 50000.0,
                            Name = "Internet",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6889)
                        },
                        new
                        {
                            Id = new Guid("48d6a71a-0243-4878-8cce-37fb19f15f23"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6891),
                            DefaultPrice = 10000.0,
                            Name = "Bảo vệ",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6893)
                        },
                        new
                        {
                            Id = new Guid("e1ea3f65-7d3e-490a-a172-b78d1654f1ff"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6906),
                            DefaultPrice = 0.0,
                            Name = "Máy giặt",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6907)
                        },
                        new
                        {
                            Id = new Guid("b02a08c8-e58f-4131-aef1-e4d571c381da"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6909),
                            DefaultPrice = 0.0,
                            Name = "Truyền hình cáp",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6910)
                        },
                        new
                        {
                            Id = new Guid("629a7567-fb21-4958-8a25-eab58d991152"),
                            CreatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6912),
                            DefaultPrice = 50000.0,
                            Name = "Thang máy",
                            Type = 0,
                            UpdatedAt = new DateTime(2022, 11, 4, 22, 2, 10, 42, DateTimeKind.Local).AddTicks(6913)
                        });
                });

            modelBuilder.Entity("Motel.Core.Entities.ProvideInBoardingHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProvideId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.HasIndex("ProvideId");

                    b.ToTable("ServiceInBoardingHouses");
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BoardingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSelfContainer")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxHuman")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BoardingHouseId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<double>("DespositedValue")
                        .HasColumnType("float");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomDepositeds");
                });

            modelBuilder.Entity("Motel.Core.Entities.SystemFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemFiles");
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Motel.Core.Entities.AppUser", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.BoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("Motel.Core.Entities.Customer", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Motel.Core.Entities.FitmentInRoom", b =>
                {
                    b.HasOne("Motel.Core.Entities.Fitment", "Fitment")
                        .WithMany()
                        .HasForeignKey("FitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.ProvideInBoardingHouse", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motel.Core.Entities.Provide", "Provide")
                        .WithMany()
                        .HasForeignKey("ProvideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Room", b =>
                {
                    b.HasOne("Motel.Core.Entities.BoardingHouse", "BoardingHouse")
                        .WithMany()
                        .HasForeignKey("BoardingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.RoomDeposited", b =>
                {
                    b.HasOne("Motel.Core.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Motel.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("Motel.Core.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
